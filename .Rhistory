qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
fin=c(5,3))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
fin=c(10,6))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
fin=c(100,60))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
fin=c(1000,600))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
pin=c(10,6))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0),
pin=c(3,2))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
par(mfrow = c(1, 2), bg="grey", mar=c(2,2,2,1), oma=c(0,0,2,0))
plot(predict(fitLM3), fitLM3.resid, main="Residuals vs. Predicted Plot")
qqnorm(fitLM3.resid)
qqline(fitLM3.resid)
mtext("Residual Analysis", outer=TRUE)
summary(mtcars)
head(mtcars)
rm(list=all())
rm(g,suppLevels)
rm(ToothGrowth)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling", repos="file://C:\Users\PaulJ\Data\tmp\Installation Files\AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling", repos="file://C:/Users/PaulJ/Data/tmp/Installation Files/AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling", repos="file://C:/Users/PaulJ/Data/tmp/Installation Files/AppliedPredictiveModeling_1.1-6.zip")
install.packages("AppliedPredictiveModeling", repos="file://C:\Users\PaulJ\Data\tmp\Installation Files\AppliedPredictiveModeling_1.1-6.zip")
install.packages("AppliedPredictiveModeling", repos="file://C:\\Users\\PaulJ\\Data\\tmp\\Installation Files\\AppliedPredictiveModeling_1.1-6.zip")
install.packages("AppliedPredictiveModeling", repos="file:C:\\Users\\PaulJ\\Data\\tmp\\Installation Files\\AppliedPredictiveModeling_1.1-6.zip")
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("R")
library(AppliedPredictiveModeling)
data(AlzheiberDisease)
library(AppliedPredictiveModeling)
library(ggplot2)
library(cars)
library(datasets)
library(ggplot2)
library(ggplot2, dep=TRUE)
install.packages('ggplot2', dep=TRUE)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling', dep=TRUE)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
rm(ToothGrowth,g,suppLevels)
summary(predictors)
adData=data.frame(predictors)
trainIndex=createDataPartition(diagnosis, p=0.5, list=FALSE)
library(caret)
trainIndex=createDataPartition(diagnosis, p=0.5, list=FALSE)
training=adData[trainIndex,]
testing=adData[-trainIndex,]
dim(training); dim(testing)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training=mixtures[inTrain,]
testing=mixtures[-inTrain,]
library(Hmisc)
View(concrete)
?concrete
cutCement <- cut2(concrete$Cement, g=5)
p1 <- qplot(concrete$CompressiveStrength, color=cutCement)
p1
p1 <- qplot(concrete$CompressiveStrength, color=cutCement, geom=c("line"))
qplot(concrete$CompressiveStrength, color=cutCement, geom=c("line"))
qplot(y=concrete$CompressiveStrength, color=cutCement, geom=c("line"))
qplot(y=concrete$CompressiveStrength, color=cutCement, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutCement, geom=c("point"))
cutBlastFurnaceSlag <- cut2(concrete$BlastFurnaceSlag, g=5)
cutFlyAsh <- cut2(concrete$FlyAsh, g=5)
cutWater <- cut2(concrete$Water, g=5)
cutSuperplasticizer <- cut2(concrete$Superplasticizer, g=5)
cutCourseAggregate <- cut2(concrete$CourseAggregate, g=5)
cutCoarseAggregate <- cut2(concrete$CoarseAggregate, g=5)
cutFineAggregate <- cut2(concrete$FineAggregate, g=5)
cutAge <- cut2(concrete$Age, g=5)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutBlastFurnaceSlag, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutFlyAsh, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutWater, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutSuperplasticizer, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutCoarseAggregate, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutFineAggregate, geom=c("point"))
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, color=cutAge, geom=c("point"))
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing=mixtures[-inTrain,]
qplot(concrete$Superplasticizer)
range(concrete$Superplasticizer)
qplot(log(concrete$Superplasticizer+1))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing  = adData[-inTrain,]
View(adData)
summary(adData$IL)
summary(adData$IL_11)
summary(adData$IL*)
summary(adData$IL)
names(adData)
names(adData)$IL
names(adData)[grep("^IL", names(adData))]
ILPredictors <- names(adData)[grep("^IL", names(adData))]
M <- abs(cor(training[,-1]))
M <- abs(cor(training[,-1]))
typeof(training[,-1])
summarytraining[,-1])
summary(training[,-1])
summary(training[,2:130])
M <- abs(cor(training[,2:130]))
diag(M) <- 0
rm(M)
preProc <- preProcess(log10(adData[,2:130]+1))
rm(preProc)
preProc <- preProcess(log10(adData[,2:130]+1))
adDataPC <- predict(preProc, log10(adData[,2:130]+1))
preProc <- preProcess(log10(adData[,2:130]+1), method="pca", pcaComp=11)
rm(preProc)
preProc <- preProcess(log10(adData[,2:130]+1), method="pca", pcaComp=11)
preProc <- preProcess(adData[,2:130], method="pca", pcaComp=11)
preProc
summary(preProc)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
View(adData)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
View(concrete)
qplot(concrete$Superplasticizer)
qplot(log(concrete$Superplasticizer))
qplot(log10(concrete$Superplasticizer+1))
rm(list=all())
rm(list=ls())
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition((y=segmentationOriginal$Case, p=0.7, list=FALSE))
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=segmentationOriginal)
library(e1071)
install.package('e1071', dependences=TRUE)
install.packages('e1071', dependences=TRUE)
install.package('caret', dependencies=TRUE)
install.packages('caret', dependencies=TRUE)
install.packages('caret', dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition((y=segmentationOriginal$Case, p=0.7, list=FALSE))
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=segmentationOriginal)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
qplot(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
plot(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
test(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
plot(modFit$finalModel, uniform=TRUE, main="ClassicationTree")
View(training)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[segmentationOriginal$Case="Train"]
training <- segmentationOriginal[segmentationOriginal$Case=="Train"]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
View(testing)
View(segmentationOriginal)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=segmentationOriginal)
plot(modFit$finalModel, uniform=TRUE, main="ClassicationTree")
print(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = oliv[,-1]
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
?olive
modelFitOlive <- train(Area ~ ., data=olive, method="rpart")
print(modelFitOlive$finalModel)
predict(modelFitOlive, newdata=newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train=sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=FALSE)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
modelFitSAheart <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=sAheart, method="glm", family="binomial")
modelFitSAheart <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=SAheart, method="glm", family="binomial")
SAheart[chdFactor] = as.factor(SAheart[chd])
SAheart[chdFactor] = as.factor(SAheart$chd)
SAheart[chdFactor] <- as.factor(SAheart$chd)
SAheart$chdFactor <- as.factor(SAheart$chd)
modelFitSAheart <- train(chdFactor ~ age+alcohol+obesity+tobacco+typea+ldl, data=SAheart, method="glm", family="binomial")
missClass = function(values, prediction) {sum(((prediction>0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(mdoelFitSAheart))
missClass(SAheart$chd, predict(modelFitSAheart))
missClass(SAheart$chd, as.value(predict(modelFitSAheart)))
missClass(SAheart$chd, as.integer(predict(modelFitSAheart)))
missClass(SAheart$chd, as.integer(predict(modelFitSAheart, newdata=trainSA)))
missClass(SAheart$chd, as.integer(predict(modelFitSAheart, newdata=testSA)))
View(testSA)
View(trainSA)
missClass(testSA$chd, as.integer(predict(modelFitSAheart, newdata=testSA)))
missClass(trainSA$chd, as.integer(predict(modelFitSAheart, newdata=trainSA)))
missClass(trainSA$chd, as.numeric(predict(modelFitSAheart, newdata=trainSA)))
missClass(testSA$chd, as.numeric(predict(modelFitSAheart, newdata=testSA)))
as.numeric(predict(modelFitSAheart, newdata=testSA))
View(SAheart)
missClass = function(values, prediction) {sum(((prediction>1.5)*1) != values)/length(values)}
missClass(testSA$chd, as.numeric(predict(modelFitSAheart, newdata=testSA)))
missClass(trainSA$chd, as.numeric(predict(modelFitSAheart, newdata=trainSA)))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.test)
View(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFitVowel <- train(y ~ ., data=vowel.train, modth="rf", prox=TRUE)
modFitVowel <- randomForest(y ~ ., data=vowel.train, modth="rf", prox=TRUE)
?varImp
varImp(modFitVowel)
vowelFitVarImp <- sort(varImp(modFitVowel))
vowelFitVarImp <- sort(varImp(modFitVowel), 1)
vowelFitVarImp <- sort(varImp(modFitVowel), Overall)
vowelFitVarImp <- sort(varImp(modFitVowel), "Overall)
""
"
vowelFitVarImp <- sort(varImp(modFitVowel), "Overall")
varImp(modFitVowel)
vowelFitVarImp <- varImp(modFitVowel)
vowelFitVarImp
View(vowelFitVarImp)
rm(list=ls())
librayr(ISLR); data(Wage)
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
setwd("C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment")
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
View(trainData)
trainDataSm <- trainData[!(names(trainData) %in% testDataIsNAs)]
trainDataSm <- trainDataSm[trainDataSm$new_window==yes]
trainDataSm <- trainDataSm[trainDataSm$new_window=="yes"]
trainDataSm <- trainDataSm[trainDataSm$new_window=="yes", ]
View(trainDataSm)
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
modFit1 <- train(classe ~ ., data=trainDataSm, method="rf", prox=TRUE)
pred1 <- predict(modFit1, trainDataSm)
table(pred1, trainDataSm$classe)
set.seed(52738)
folds <- createFolds(y=trainDataSm$classe, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
folds[[2]][1:10]
folds[[3]][1:10]
folds[[3]][1:20]
folds[[3]]
folds[[1]]
View(folds)
temp1 <- data.frame(folds)
sapply(folds,length)
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
View(trainDataSm)
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
View(trainDataSm)
trainDataTemp <- subset(trainDataSm, folds[[1]])
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
trainDataTemp <- trainDataSm[aFold, ]
trainDataTemp <- trainDataSm[folds[[1]], ]
View(trainDataTemp)
testDataTemp <- trainDataSm[-folds[[1]], ]
modFitTemp <- train(classe ~ ., data=trainDataTemp, method="rf", prox=TRUE)
predTemp <- predict(modFitTemp, testDataTemp)
predTemp
accTemp <- sum(predTemp == testDataTemp$classe)/length(predTemp)
accTemp
sum(predTemp == testDataTemp$classe)
predTemp == testDataTemp$classe
folds[[1]]
-folds[[1]]
length(folds)
accTemp1[1] = .4
accTemp1[1] <- .4
accTemp1[[1] = .4
accTemp1[[1] <- .4
a <- list(0, dim=c(0,3))
a
rem(a)
rm(a)
vector("list", 10)
accTemp <- vector("list", 10)
accTemp
View(accTemp)
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
mean(accTemp)
accTemp[[1]]
accTemp
temp1 <- vector("list", length(10))
temp1
temp1[1] <- 10
temp1
temp1[2] <- 20
temp1
temp1 <- vector("numeric", length(10))
temp1
temp1[2] <- 20
temp1
temp1[1] <- 10
temp1
mean(temp1)
print("The mean of 10 k-folds accuracy is", mean(temp1))
?print
print("The mean of 10 k-folds accuracy is "+mean(temp1))
print("The mean of 10 k-folds accuracy is "+ as.character(mean(temp1)))
source('C:/Users/PaulJ/Data/Education/Online Courses/Coursera Practical Machine Learning/Project/Coursera-Practical-Machine-Learning-Assignment/barbell-Lift-Analysis.R')
predTest <- predict(modFitTemp[[7]], testData)
predTest
accVarFromMean <- abs(accTemp-mean(accTemp))
accVarFromMean
which.min(abs(accTemp-mean(accTemp)))
View(testData)
bestAvgCluster <- which.min(abs(accTemp-mean(accTemp)))
sprintf("The mean of 10 k-folds accuracy is %1.3f", mean(accTemp))
allCols <- cbind(fold=1:length(folds),)
allCols <- cbind(fold=1:length(folds),
Accuracy=accTemp)
allCols
rowname(allCols) <- NULL
rownames(allCols) <- NULL
allCols
print(allCols)
sprinf(allCols)
sprintf(allCols)
sprintf("", allCols)
sprintf("%1.0f: %1.3f", allCols)
set.seed(521)
t1 <- round(abs(rt(200, df = 1.8)))
t2 <- round(abs(rt(200, df = 1.4)))
table(t1, t2) # simple
print(table(t1, t2), zero.print = ".")
v
allCols <- as.data.frame(accTemp, row.names=1:length(folds))
allCols <- as.data.frame(accTemp, row.names=as.character(1:length(folds)))
allCols
print(allCols, digits=3)
plot(accTemp)
ablines(h=mean(accTemp))
abline(h=mean(accTemp))
trainData <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
)
View(testDataNAs)
train(classe ~ ., data=trainDataTemp, method="rf", prox=TRUE)
sum(predTemp == testDataTemp$classe)/length(predTemp)
sum(predTemp == testDataTemp$classe)*1/length(predTemp)
modFitTemp$accuracy
modFitTemp
modFitTemp[[7]]
accTemp[7]
bestAvgCluster
modFitTemp[bestAvgCluster]
predTest
predTest <- as.data.frame(predTest, row.names=as.character(1:length(predTest)))
predTest
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:length(predTest)),
colnames(c("Prediction")))
as.character(1:length(predTest))
length(predTest)
predTest
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:length(folds)),
colnames(c("Prediction")))
as.character(1:length(folds))
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:length(testData)),
colnames(c("Prediction")))
as.character(1:length(testData))
as.character(1:nrow(testData))
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)),
colnames(c("Prediction")))
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)),
colnames=c("Prediction"))
predTest
as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)),
col.names=c("Prediction"))
predTest <- as.data.frame(Prediction =
predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)))
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)),
col.names=c("Prediction"))
predTest
View(predTest)
colnames(predTest) <- c("Prediction")
View(predTest)
predTest
predTest <- as.data.frame(predict(modFitTemp[[bestAvgCluster]], testData),
row.names=as.character(1:nrow(testData)))
colnames(predTest) <- c("Prediction")
print("The prediction for the test data set are as follows:")
predTest
allCols <- as.data.frame(accTemp, row.names=as.character(1:length(folds)))
as.data.frame(accuracyFit, row.names=as.character(1:length(folds)))
accuracyFit <- accTemp
as.data.frame(accuracyFit, row.names=as.character(1:length(folds)))
round(as.data.frame(accuracyFit, row.names=as.character(1:length(folds))),3)
summary(testData, trainData)
summary(testData)
dim(trainData)
colSums(is.na(testData))==nrow(testData)
sum((colSums(is.na(testData))==nrow(testData))*1)
testData <- read.csv("..\\pml-testing.csv")
sum((colSums(is.na(testData))==nrow(testData))*1)
sum((colSums(is.na(trainData))==nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.1*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.01*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.001*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.0001*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.00001*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.00000*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.000001*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.0000001*nrow(trainData))*1)
sum((colSums(is.na(trainData))<0.00000001*nrow(trainData))*1)
sum(colSums(is.na(trainData)))
colSums(is.na(trainData))
nrow(trainData)
19216/19622
1-19216/19622
sum(colSums(is.na(trainData))>nrow(trainData)*0.9)
sum(colSums(is.na(trainData))>nrow(trainData)*0.95)
sum(colSums(is.na(trainData))>nrow(trainData)*0.99)
sum(colSums(is.na(trainData))>nrow(trainData)*0.95)
sum(colSums(is.na(trainData))>nrow(trainData)*0.95)/ncol(trainData)
dim(trainData)
trainData.rows <- dim(trainData)
trainData.rows
(trainData.rows, trainData.cols) <- dim(trainData)
trainData.RowsCols <- dim(trainData)
trainData.RowsCols[1]
colnames(trainData)[1:10]
table(trainData$classe)
sum((colSums(is.na(testData))==nrow(testData))*1)
View(testData)
testDataSm <- subset(testDataSm, select=-c(X, user_name,
raw_timestamp_part_1,
raw_timestamp_part_2,
cvtd_timestamp, new_window,
num_window))
testDataSm <- subset(testData, select=testDataNotNAs)
testDataSm <- subset(testDataSm, select=-c(X, user_name,
raw_timestamp_part_1,
raw_timestamp_part_2,
cvtd_timestamp, new_window,
num_window))
round(as.data.frame(accuracyFit, row.names=as.character(1:length(folds))),3)
